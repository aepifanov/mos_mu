---

- name: restart ceph mons with upstart
  service:
    name: ceph-mon
    state: restarted
    args: id={{ ansible_hostname }}
  when:
    - restart_mon is defined
    - restart_mon == "yes"

- name: select a running monitor
  set_fact: mon_host={{ item }}
  with_items: "{{ groups['controller'] }}"
  when:
    - item != inventory_hostname
    - restart_mon is defined
    - restart_mon == "yes"

- name: waiting for the monitor to join the quorum...
  vars:
    health_mon_check_retries: 5
    health_mon_check_delay: 10

  shell: |
    ceph -s  | grep monmap | sed 's/.*quorum//' | egrep -sq {{ ansible_hostname }}
  register: result
  until: result.rc == 0
  retries: "{{ health_mon_check_retries }}"
  delay: "{{ health_mon_check_delay }}"
  delegate_to: "{{ mon_host }}"
  when:
    - restart_mon is defined
    - restart_mon == "yes"


- name: unset osd flags
  command: ceph osd set {{ item }}
  with_items:
    - noout
    - noscrub
    - nodeep-scrub
  delegate_to: "{{ groups['controller'][0] }}"
  when:
    - restart_osd is defined
    - restart_osd == "yes"

- name: restart ceph osds
  service:
    name: ceph-osd-all
    state: restarted
  when:
    - restart_osd is defined
    - restart_osd == "yes"

- name: waiting for clean pgs...
  vars:
    health_osd_check_retries: 10
    health_osd_check_delay: 10
  shell: |
    test "$(ceph pg stat | sed 's/^.*pgs://;s/active+clean.*//;s/ //')" -eq "$(ceph pg stat  | sed 's/pgs.*//;s/^.*://;s/ //')" && ceph health | egrep -sq "HEALTH_OK|HEALTH_WARN"
  register: result
  until: result.rc == 0
  retries: "{{ health_osd_check_retries }}"
  delay: "{{ health_osd_check_delay }}"
  delegate_to: "{{ groups['controller'][0] }}"
  when:
    - restart_osd is defined
    - restart_osd == "yes"


- name: unset osd flags
  command: ceph osd unset {{ item }}
  with_items:
    - noout
    - noscrub
    - nodeep-scrub
  delegate_to: "{{ groups['controller'][0] }}"
  when:
    - restart_osd is defined
    - restart_osd == "yes"


- name: restart rados gateway server(s)
  service:
    name: radosgw-all
    state: restarted
  when:
    - restart_rgw is defined
    - restart_rgw == "yes"
